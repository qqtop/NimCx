styledEchoPrint	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#styledEchoPrint.m,varargs[untyped]	cxglobal: styledEchoPrint(m: varargs[untyped]): untyped	
procName	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#procName.m,untyped	cxglobal: procName(x: untyped): untyped	
toEnum	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#toEnum.m,static[string]	cxglobal: toEnum(words: static[string]): untyped	
cxgetType	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxgetType.m,typed	cxglobal: cxgetType(s: typed): untyped	
tupleTypes	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#tupleTypes	cxglobal: tupleTypes(atuple: tuple): seq[string]	
unidecodeU	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#unidecodeU.t,untyped	cxglobal: unidecodeU(ustring: untyped): untyped	
`*`	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#*.t,string,int	cxglobal: `*`(s: string; n: int): untyped	
toki	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#toki.t,untyped	cxglobal: toki(s: untyped): untyped	
newLine	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#newLine,int	cxglobal: newLine(n: int = 1): string	
cxtoLower	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxtoLower,char	cxglobal: cxtoLower(c: char): char	
toTwInt	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#toTwInt.c,cushort	cxglobal: toTwInt(x: cushort): int	
isNumeric	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#isNumeric,string	cxglobal: isNumeric(s: string): bool	
tw	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#tw.t	cxglobal: tw(): int	
th	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#th.t	cxglobal: th(): int	
remapIntToFloat	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#remapIntToFloat,seq[int]	cxglobal: remapIntToFloat(s: seq[int]): seq[float]	
remapFloatToInt	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#remapFloatToInt,seq[float]	cxglobal: remapFloatToInt(s: seq[float]): seq[int]	
remapToString	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#remapToString,seq[T]	cxglobal: remapToString[T](s: seq[T]): seq[string]	
fastWrite	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#fastWrite,File,string	cxglobal: fastWrite(f: File; s: string)	
cxpad	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxpad,string,int,string	cxglobal: cxpad(s: string; padlen: int; paddy: string = spaces(1)): string	
cxpdx	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxpdx,int,string,string	cxglobal: cxpdx(padLen: int; s: string; paddy: string = spaces(1)): string	
cxLpad	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxLpad,string,int,string	cxglobal: cxLpad(s: string; padlen: int; paddy: string = spaces(1)): string	
cxLpdx	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxLpdx,int,string,string	cxglobal: cxLpdx(padLen: int; s: string; paddy: string = spaces(1)): string	
cxLpadN	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxLpadN,string,int,string	cxglobal: cxLpadN(s: string; padlen: int; paddy: string = &quot;0&quot;): string	
cxLpadN	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxLpadN,SomeNumber,int,string	cxglobal: cxLpadN(s: SomeNumber; padlen: int; paddy: string = &quot;0&quot;): string	
rndSample	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#rndSample,seq[T]	cxglobal: rndSample[T](asq: seq[T]): T	
rndRGB	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#rndRGB	cxglobal: rndRGB(): auto	
sum	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#sum,seq[T]	cxglobal: sum[T](aseq: seq[T]): T	
product	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#product,seq[T]	cxglobal: product[T](aseq: seq[T]): T	
doSomething	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#doSomething.t,int,untyped	cxglobal: doSomething(secs: int; body: untyped)	
isBlank	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#isBlank,string	cxglobal: isBlank(val: string): bool	
isEmpty	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#isEmpty,string	cxglobal: isEmpty(val: string): bool	
getRndInt	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getRndInt,int,int	cxglobal: getRndInt(mi: int = 0; ma: int = int.high): int	
getRndBool	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getRndBool	cxglobal: getRndBool(): bool	
getRandomSignI	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getRandomSignI	cxglobal: getRandomSignI(): int	
getRandomSignF	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getRandomSignF	cxglobal: getRandomSignF(): float	
reverseMe	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#reverseMe,openArray[T]	cxglobal: reverseMe[T](xs: openArray[T]): seq[T]	
reverse	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#reverse,seq[T]	cxglobal: reverse[T](s: var seq[T])	
reverseText	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#reverseText,string	cxglobal: reverseText(text: string): string	
reverseString	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#reverseString,string	cxglobal: reverseString(text: string): string	
createSeqBool	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqBool,int	cxglobal: createSeqBool(n: int = 10): seq[bool]	
createSeqBinary	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqBinary,int	cxglobal: createSeqBinary(n: int = 10): seq[int]	
createSeqInt	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqInt,int,int,int	cxglobal: createSeqInt(n: int = 10; mi: int = 0; ma: int = 1000): seq[int]	
ff	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#ff,float,int	cxglobal: ff(zz: float; n: int = 5): string	
ff2	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#ff2,SomeNumber,int	cxglobal: ff2(zz: SomeNumber; n: int = 3): string	
ff2Eu	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#ff2Eu,SomeNumber,int	cxglobal: ff2Eu(zzz: SomeNumber; n: int = 3): string	
getRandomFloat	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getRandomFloat	cxglobal: getRandomFloat(): float	
getRndFloat	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getRndFloat	cxglobal: getRndFloat(): float	
createSeqFloat	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqFloat,int,int	cxglobal: createSeqFloat(n: int = 10; prec: int = 3): seq[float]	
seqLeft	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#seqLeft,seq[T],int	cxglobal: seqLeft[T](it: seq[T]; n: int): seq[T]	
seqRight	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#seqRight,seq[T],int	cxglobal: seqRight[T](it: seq[T]; n: int): seq[T]	
cxIsDigit	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxIsDigit,string,char	cxglobal: cxIsDigit(s: string; sep: char = &apos;.&apos;): bool	
fmtx	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#fmtx,openArray[string],varargs[T,]	cxglobal: fmtx[T](fmts: openArray[string]; fstrings: varargs[T, `$`]): string	
showRune	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#showRune,string	cxglobal: showRune(s: string): string	
unquote	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#unquote,string	cxglobal: unquote(s: string): string	
cleanScreen	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cleanScreen	cxglobal: cleanScreen()	
centerX	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#centerX	cxglobal: centerX(): int	
centerPos	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#centerPos,string	cxglobal: centerPos(astring: string)	
colPaletteName	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#colPaletteName.t,string,int	cxglobal: colPaletteName(coltype: string; n: int): auto	
aPaletteSample	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#aPaletteSample.t,string	cxglobal: aPaletteSample(coltype: string): int	
paletix	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#paletix.t,string	cxglobal: paletix(pl: string): untyped	
randCol2	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#randCol2.t,string	cxglobal: randCol2(coltype: string): auto	
randCol	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#randCol.t	cxglobal: randCol(): string	
rndCol	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#rndCol.t,int,int,int	cxglobal: rndCol(r: int = getRndInt(0, 254); g: int = getRndInt(0, 254); b: int = getRndInt(0, 254)): string	
fastsplit	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#fastsplit,string,char	cxglobal: fastsplit(s: string; sep: char): seq[string]	
splitty	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#splitty,string,string	cxglobal: splitty(txt: string; sep: string): seq[string]	
doFlag	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#doFlag,string,int,T,string	cxglobal: doFlag[T](flagcol: string = yellowgreen; flags: int = 1; text: T = &quot;&quot;;\n          textcol: string = termwhite): string	
getAscii	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getAscii,string	cxglobal: getAscii(s: string): seq[int]	
curUp	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#curUp.t,int	cxglobal: curUp(x: int = 1)	
curDn	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#curDn.t,int	cxglobal: curDn(x: int = 1)	
curBk	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#curBk.t,int	cxglobal: curBk(x: int = 1)	
curFw	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#curFw,int	cxglobal: curFw(x: int = 1): auto	
curSetx	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#curSetx.t,int	cxglobal: curSetx(x: int)	
cxPos	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxPos.t	cxglobal: cxPos(x): string	
curSet	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#curSet.t,int,int	cxglobal: curSet(x: int = 0; y: int = 0)	
clearup	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#clearup.t,int	cxglobal: clearup(x: int = 80)	
curMove	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#curMove,int,int,int,int	cxglobal: curMove(up: int = 0; dn: int = 0; fw: int = 0; bk: int = 0)	
curOn	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#curOn.t	cxglobal: curOn()	
curOff	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#curOff.t	cxglobal: curOff()	
stripper	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#stripper,string	cxglobal: stripper(str: string): string	
`&lt;&gt;`	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#<>.t,untyped,untyped	cxglobal: `&lt;&gt;`(a, b: untyped): untyped	
`[]`	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#[],seq[T],Slice[U]	cxglobal: `[]`[T; U](a: seq[T]; x: Slice[U]): seq[T]	
loopy	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#loopy.t,T,untyped	cxglobal: loopy[T](ite: T; st: untyped)	
loopy2	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#loopy2.t,int,int,untyped	cxglobal: loopy2(mi: int = 0; ma: int = 5; st: untyped)	
fromCString	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#fromCString,pointer,int	cxglobal: fromCString(p: pointer; len: int): string	
streamFile	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#streamFile,string,FileMode	cxglobal: streamFile(filename: string; mode: FileMode): FileStream	
uniform	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#uniform,float,float	cxglobal: uniform(a, b: float): float	
sampleSeq	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#sampleSeq,seq[T],int,int	cxglobal: sampleSeq[T](x: seq[T]; a: int; b: int): seq[T]	
tupleToStr	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#tupleToStr	cxglobal: tupleToStr(xs: tuple): string	
colPaletteIndexer	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#colPaletteIndexer.t,seq[string]	cxglobal: colPaletteIndexer(colx: seq[string]): auto	
colPaletteLen	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#colPaletteLen.t,string	cxglobal: colPaletteLen(coltype: string): auto	
colPalette	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#colPalette.t,string,int	cxglobal: colPalette(coltype: string; n: int): auto	
colorsPalette	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#colorsPalette.t,string	cxglobal: colorsPalette(coltype: string): auto	
randPastelCol	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#randPastelCol.t	cxglobal: randPastelCol(): string	
upperCase	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#upperCase.t,string	cxglobal: upperCase(s: string): string	
lowerCase	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#lowerCase.t,string	cxglobal: lowerCase(s: string): string	
currentLine	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#currentLine.t	cxglobal: currentLine()	
hdx	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#hdx.t,untyped,string,int,int	cxglobal: hdx(code: untyped; frm: string = &quot;+&quot;; width: int = tw; nxpos: int = 0): void	
RpointInt	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#RpointInt	cxglobal: RpointInt	
RpointFloat	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#RpointFloat	cxglobal: RpointFloat	
fibi	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#fibi,int	cxglobal: fibi(n: int): int64	
pswwaux	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#pswwaux	cxglobal: pswwaux()	
cxCpuInfo	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxCpuInfo	cxglobal: cxCpuInfo(): string	
cpuInfo	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cpuInfo	cxglobal: cpuInfo(): seq[string]	
showCpuInfo	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#showCpuInfo	cxglobal: showCpuInfo()	
cxVideoInfo	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxVideoInfo	cxglobal: cxVideoInfo(): string	
showCpuCores	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#showCpuCores	cxglobal: showCpuCores()	
showHostNameCtl	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#showHostNameCtl	cxglobal: showHostNameCtl()	
getUserName	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getUserName	cxglobal: getUserName(): string	
getPassword	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getPassword,int64	cxglobal: getPassword(ahash: int64 = 0&apos;i64): string	
getPwd	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getPwd	cxglobal: getPwd(): string	
cxInput	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxInput,string,string,int,bool	cxglobal: cxInput(prompt: string; promptColor: string = greenYellow; xpos: int = 0;\n        allowBlank: bool = false): string	
cxYesNo	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxYesNo,string,string,int,bool	cxglobal: cxYesNo(prompt: string = &quot;Continue &quot;; promptColor: string = greenYellow; xpos: int = 0;\n        allowBlank: bool = false): bool	
getRandomPointInCircle	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getRandomPointInCircle,float	cxglobal: getRandomPointInCircle(radius: float = 1.0): seq[float]	
getRandomPoint	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getRandomPoint,float,float,float,float	cxglobal: getRandomPoint(minx: float = -500.0; maxx: float = 500.0; miny: float = -500.0;\n               maxy: float = 500.0): RpointFloat	
getRandomPoint	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getRandomPoint,int,int,int,int	cxglobal: getRandomPoint(minx: int = -500; maxx: int = 500; miny: int = -500; maxy: int = 500): RpointInt	
getPointInSphere	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getPointInSphere	cxglobal: getPointInSphere(): auto	
randpos	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#randpos	cxglobal: randpos(): int	
getCard	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getCard.t	cxglobal: getCard(): auto	
showRandomCard	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#showRandomCard,int	cxglobal: showRandomCard(xpos: int = centerX())	
showRuler	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#showRuler,int,int,int,string,string,bool	cxglobal: showRuler(xpos: int = 0; xposE: int = 0; ypos: int = 0; fgr: string = white;\n          bgr: string = getBg(bgDefault); vert: bool = false)	
centerMark	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#centerMark,bool	cxglobal: centerMark(showpos: bool = false)	
superHeader	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#superHeader,string	cxglobal: superHeader(bstring: string)	
superHeader	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#superHeader,string,string,string	cxglobal: superHeader(bstring: string; strcol: string; frmcol: string)	
newWordCJK	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#newWordCJK,int,int	cxglobal: newWordCJK(minwl: int = 3; maxwl: int = 10): string	
newWord	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#newWord,int,int	cxglobal: newWord(minwl: int = 3; maxwl: int = 10): string	
newWord2	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#newWord2,int,int	cxglobal: newWord2(minwl: int = 3; maxwl: int = 10): string	
newWord3	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#newWord3,int,int,bool	cxglobal: newWord3(minwl: int = 3; maxwl: int = 10; nflag: bool = true): string	
newHiragana	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#newHiragana,int,int	cxglobal: newHiragana(minwl: int = 3; maxwl: int = 10): string	
newKatakana	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#newKatakana,int,int	cxglobal: newKatakana(minwl: int = 3; maxwl: int = 10): string	
newText	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#newText,int,string	cxglobal: newText(textLen: int = 1000; textgen: string = &quot;newWord&quot;): string	
rndStr	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#rndStr,int	cxglobal: rndStr(n: int = 20): string	
createRandomDataFile	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createRandomDataFile,string	cxglobal: createRandomDataFile(filename: string = &quot;randomdata.dat&quot;)	
cxBinomialCoeff	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#cxBinomialCoeff,int,int	cxglobal: cxBinomialCoeff(n, k: int): int	
bitCheck	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#bitCheck.t,untyped,untyped	cxglobal: bitCheck(a, b: untyped): bool	
createSeqAll	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqAll,int,int	cxglobal: createSeqAll(min: int = 0; max: int = 40878): seq[string]	
createSeqGeoshapes	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqGeoshapes	cxglobal: createSeqGeoshapes(): seq[string]	
createSeqHiragana	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqHiragana	cxglobal: createSeqHiragana(): seq[string]	
createSeqKatakana	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqKatakana	cxglobal: createSeqKatakana(): seq[string]	
createSeqCJK	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqCJK	cxglobal: createSeqCJK(): seq[string]	
createSeqFractur	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqFractur	cxglobal: createSeqFractur(): seq[string]	
createSeqIching	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqIching	cxglobal: createSeqIching(): seq[string]	
createSeqApl	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqApl	cxglobal: createSeqApl(): seq[string]	
createSeqBoxChars	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#createSeqBoxChars	cxglobal: createSeqBoxChars(): seq[string]	
boxy	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#boxy,int,int,int	cxglobal: boxy(w: int = 20; h: int = 5; fgr = randcol(); xpos: int = 1)	
boxy2	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#boxy2,int,int,int	cxglobal: boxy2(w: int = 20; h: int = 5; fgr = randcol(); xpos: int = 1)	
spiralBoxy	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#spiralBoxy,int,int,int	cxglobal: spiralBoxy(w: int = 20; h: int = 20; xpos: int = 1)	
spiralBoxy2	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#spiralBoxy2,int,int,int	cxglobal: spiralBoxy2(w: int = 20; h: int = 20; xpos: int = 1)	
showSeq	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#showSeq,seq[T],string,int,int,bool,int	cxglobal: showSeq[T](z: seq[T]; fgr: string = pastelgreen; cols = 6; maxitemwidth: int = 5;\n           displayflag: bool = true; indexstart = 0): string	
seqHighLite	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#seqHighLite,seq[T],seq[T],string	cxglobal: seqHighLite[T](b: seq[T]; b1: seq[T]; col: string = gold)	
shift	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#shift,seq[T],Natural	cxglobal: shift[T](x: var seq[T]; zz: Natural = 0): T	
reverseIter	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#reverseIter.i,openArray[T]	cxglobal: reverseIter[T](a: openArray[T]): T	
withFile	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#withFile.t,untyped,untyped,untyped,untyped	cxglobal: withFile(f, fn, mode, actions: untyped): untyped	
checkMemFull	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#checkMemFull,int	cxglobal: checkMemFull(xpos: int = 2)	
checkMem	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#checkMem,int	cxglobal: checkMem(xpos: int = 2)	
fullGcStats	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#fullGcStats,int	cxglobal: fullGcStats(xpos: int = 2): int	
memCheck	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#memCheck,bool	cxglobal: memCheck(stats: bool = false)	
distanceTo	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#distanceTo,,	cxglobal: distanceTo(origin: (float, float); dest: (float, float)): float	
getEmojisSmall	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getEmojisSmall	cxglobal: getEmojisSmall(): seq[string]	
showEmojisSmall	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#showEmojisSmall	cxglobal: showEmojisSmall()	
genMacAddress	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#genMacAddress	cxglobal: genMacAddress(): string	
quickPw	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#quickPw	cxglobal: quickPw(): string	
quickLargeInt	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#quickLargeInt	cxglobal: quickLargeInt(): string	
quickBinaryString	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#quickBinaryString,int	cxglobal: quickBinaryString(width: int = 10): string	
span	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#span.i,string,int,BackwardsIndex	cxglobal: span(s: string; first: int; last: BackwardsIndex): char	
checkPrime	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#checkPrime,int	cxglobal: checkPrime(a: int): bool	
primey	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#primey.i,int,int	cxglobal: primey(s: int = 0; e: int): int	
getPrimeSeq	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxglobal.html#getPrimeSeq,int,int	cxglobal: getPrimeSeq(x, y: int): seq[int]	
