cxprint	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#cxprint.t,int,varargs[untyped]	cxprint: cxprint(xpos: int; args: varargs[untyped])	
cxprintLn	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#cxprintLn.t,int,varargs[untyped]	cxprint: cxprintLn(xpos: int; args: varargs[untyped])	
cxprintxy	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#cxprintxy.t,int,int,varargs[untyped]	cxprint: cxprintxy(xpos: int; ypos: int; args: varargs[untyped])	
cxwrite	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#cxwrite.t,varargs[untyped]	cxprint: cxwrite(args: varargs[untyped])	
cxwriteLn	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#cxwriteLn.t,varargs[untyped]	cxprint: cxwriteLn(args: varargs[untyped])	
printf	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printf,cstring	cxprint: printf(formatStr: cstring)	
print	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#print,T,string,string,int,bool,bool,set[Style]	cxprint: print[T](astring: T; fgr: string = getFg(fgDefault); bgr: string = getBg(bgDefault);\n         xpos: int = 0; fitLine: bool = false; centered: bool = false;\n         styled: set[Style] = {})	
printLn	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLn,T,string,string,int,bool,bool,set[Style]	cxprint: printLn[T](astring: T; fgr: string = getFg(fgDefault); bgr: string = getBg(bgDefault);\n           xpos: int = 0; fitLine: bool = false; centered: bool = false;\n           styled: set[Style] = {})	
hline	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#hline,int,string,int,string	cxprint: hline(n: int = tw; col: string = white; xpos: int = 0; lt: string = &quot;-&quot;): string	
hlineLn	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#hlineLn,int,string,int,string	cxprint: hlineLn(n: int = tw; col: string = white; xpos: int = 0; lt: string = &quot;-&quot;): string	
dline	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#dline,int,string,string	cxprint: dline(n: int = tw; lt: string = &quot;-&quot;; col: string = termwhite)	
dlineLn	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#dlineLn,int,string,string	cxprint: dlineLn(n: int = tw; lt: string = &quot;-&quot;; col: string = termwhite)	
decho	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#decho,int	cxprint: decho(z: int = 2)	
printRainbow	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printRainbow,string,set[Style]	cxprint: printRainbow(astr: string; styled: set[Style] = {})	
printLnRainbow	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnRainbow,T,set[Style]	cxprint: printLnRainbow[T](s: T; styled: set[Style] = {})	
printBiCol	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printBiCol,varargs[T,],string,string,string,int,bool,set[Style]	cxprint: printBiCol[T](s: varargs[T, `$`]; colLeft: string = yellowgreen;\n              colRight: string = termwhite; sep: string = &quot;:&quot;; xpos: int = 0;\n              centered: bool = false; styled: set[Style] = {})	
printLnBiCol	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnBiCol,varargs[T,],string,string,string,int,bool,set[Style]	cxprint: printLnBiCol[T](s: varargs[T, `$`]; colLeft: string = yellowgreen;\n                colRight: string = termwhite; sep: string = &quot;:&quot;; xpos: int = 0;\n                centered: bool = false; styled: set[Style] = {})	
printHL	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printHL,string,string,string,string	cxprint: printHL(s: string; substr: string; col: string = termwhite;\n        bgr: string = getBg(bgDefault))	
printLnHL	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnHL,string,string,string,string	cxprint: printLnHL(s: string; substr: string; col: string = lightcyan;\n          bgr: string = getBg(bgDefault))	
cxHorizontal	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#cxHorizontal	CxLineType.cxHorizontal	
cxVertical	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#cxVertical	CxLineType.cxVertical	
CxLineType	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#CxLineType	cxprint: CxLineType	
CxlineText	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#CxlineText	cxprint: CxlineText	
Cxline	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#Cxline	cxprint: Cxline	
newCxlineText	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#newCxlineText	cxprint: newCxlineText(): CxlineText	
newCxLine	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#newCxLine	cxprint: newCxLine(): Cxline	
printCxLine	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printCxLine,Cxline	cxprint: printCxLine(aline: var Cxline)	
doty	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#doty,int,string,string,int	cxprint: doty(d: int; fgr: string = white; bgr: string = black; xpos: int = 1)	
dotyLn	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#dotyLn,int,string,string,int	cxprint: dotyLn(dots: int; fgr: string = termwhite; bgr: string = black; xpos: int = 1)	
printErrorMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printErrorMsg,string,int	cxprint: printErrorMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printBErrorMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printBErrorMsg,string,int	cxprint: printBErrorMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printLnErrorMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnErrorMsg,string,int	cxprint: printLnErrorMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printLnBErrorMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnBErrorMsg,string,int	cxprint: printLnBErrorMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printFailMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printFailMsg,string,int	cxprint: printFailMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printLnFailMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnFailMsg,string,int	cxprint: printLnFailMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printAlertMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printAlertMsg,string,int	cxprint: printAlertMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printLnAlertMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnAlertMsg,string,int	cxprint: printLnAlertMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printBAlertMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printBAlertMsg,string,int	cxprint: printBAlertMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printLnBAlertMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnBAlertMsg,string,int	cxprint: printLnBAlertMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printOKMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printOKMsg,string,int	cxprint: printOKMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printLnOkMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnOkMsg,string,int	cxprint: printLnOkMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printStatusMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printStatusMsg,string,int	cxprint: printStatusMsg(atext: string = &quot;&quot;; xpos: int = 1; colLeft = lightseagreen)	
printLnStatusMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnStatusMsg,string,int	cxprint: printLnStatusMsg(atext: string = &quot;&quot;; xpos: int = 1; colLeft = lightseagreen)	
printHelpMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printHelpMsg,string,int	cxprint: printHelpMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printLnHelpMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnHelpMsg,string,int	cxprint: printLnHelpMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printBelpMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printBelpMsg,string,int	cxprint: printBelpMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printLnBelpMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnBelpMsg,string,int	cxprint: printLnBelpMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printCodeMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printCodeMsg,string,int	cxprint: printCodeMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printLnCodeMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnCodeMsg,string,int	cxprint: printLnCodeMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printEelpMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printEelpMsg,string,int	cxprint: printEelpMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printLnEelpMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnEelpMsg,string,int	cxprint: printLnEelpMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printPassMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printPassMsg,string,int	cxprint: printPassMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printLnPassMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnPassMsg,string,int	cxprint: printLnPassMsg(atext: string = &quot;&quot;; xpos: int = 1): string	
printInfoMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printInfoMsg,string,string,string,string,int	cxprint: printInfoMsg(info, atext: string = &quot;&quot;; colLeft: string = lightslategray;\n             colRight: string = pastelWhite; xpos: int = 1): string	
printLnInfoMsg	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#printLnInfoMsg,string,string,string,string,int	cxprint: printLnInfoMsg(info, atext: string = &quot;&quot;; colLeft: string = lightslategray;\n               colRight: string = pastelWhite; xpos: int = 1): string	
dprint	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#dprint.t,T	cxprint: dprint[T](s: T)	
pdebug	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cxprint.html#pdebug.m,varargs[typed]	cxprint: pdebug(n: varargs[typed]): untyped	
