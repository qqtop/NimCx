CXLIBVERSION	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#CXLIBVERSION	cx: CXLIBVERSION	
cxstart	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cxstart	cx: cxstart	
Benchmarkres	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#Benchmarkres	cx: Benchmarkres	
benchmarkresults	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#benchmarkresults	cx: benchmarkresults	
cxtmpfilenames	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cxtmpfilenames	cx: cxtmpfilenames	
newCxCounter	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#newCxCounter	cx: newCxCounter(): ref (Cxcounter)	
add	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#add,ref.Cxcounter	cx: add(co: ref Cxcounter)	
dec	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#dec,ref.Cxcounter	cx: dec(co: ref Cxcounter)	
reset	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#reset,ref.Cxcounter	cx: reset(co: ref Cxcounter)	
toInt	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#toInt.c,char	cx: toInt(x: char): int	
toChar	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#toChar.c,int	cx: toChar(x: int): char	
cxflat	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cxflat.t	cx: cxflat(): untyped	
cxSingleUp	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cxSingleUp.t	cx: cxSingleUp(): untyped	
cxSingleDown	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cxSingleDown.t	cx: cxSingleDown(): untyped	
cxDoubleUp	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cxDoubleUp.t	cx: cxDoubleUp(): untyped	
cxDoubleDown	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cxDoubleDown.t	cx: cxDoubleDown(): untyped	
cx45Up	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cx45Up.t	cx: cx45Up(): untyped	
cx45Down	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cx45Down.t	cx: cx45Down(): untyped	
`as`	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#as.t,T,typedesc[U]	cx: `as`[T; U; ](x: T; _: typedesc[U]): U	
newColor	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#newColor,int,int,int	cx: newColor(r, g, b: int): string	
newColor2	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#newColor2,int,int,int	cx: newColor2(r, g, b: int): string	
checkColor	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#checkColor,string	cx: checkColor(colname: string): bool	
showColors	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#showColors	cx: showColors()	
makeColor	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#makeColor,int,int,int,int	cx: makeColor(r: int = getrndint(0, 2550); g: int = getrndint(0, 2550);\n          b: int = getrndint(1000, 2550); xpos: int = 1)	
makeColorTest	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#makeColorTest	cx: makeColorTest()	
makeGreyScaleTest	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#makeGreyScaleTest,int,int,int	cx: makeGreyScaleTest(astart: int = 0; aend: int = 255; astep: int = 5)	
nimcat	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#nimcat,string,varargs[string,]	cx: nimcat(curFile: string; countphrase: varargs[string, `$`] = &quot;&quot;)	
benchmark	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#benchmark.t,string,int,typed	cx: benchmark(benchmarkName: string; repeatcount: int = 1; code: typed)	
benchmark	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#benchmark.t,string,typed	cx: benchmark(benchmarkName: string; code: typed)	
showBench	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#showBench	cx: showBench()	
showPalette	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#showPalette,string	cx: showPalette(coltype: string = &quot;white&quot;)	
colorio	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#colorio	cx: colorio()	
spellInteger	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#spellInteger,int64	cx: spellInteger(n: int64): string	
spellInteger2	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#spellInteger2,string	cx: spellInteger2(n: string): string	
spellFloat	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#spellFloat,float64,bool,string,string	cx: spellFloat(n: float64; currency: bool = false; sep: string = &quot;.&quot;;\n           sepname: string = &quot; dot &quot;): string	
currentFile	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#currentFile.t	cx: currentFile(): string	
zipWith	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#zipWith.t,untyped,openArray[T1],openArray[T2]	cx: zipWith[T1; T2](f: untyped; xs: openArray[T1]; ys: openArray[T2]): untyped	
newDir	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#newDir,string	cx: newDir(dirname: string)	
remDir	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#remDir,string	cx: remDir(dirname: string): bool	
checkClip	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#checkClip,string	cx: checkClip(sel: string = &quot;primary&quot;): string	
toClip	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#toClip,T	cx: toClip[T](s: T)	
getColorName	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#getColorName,T	cx: getColorName[T](sc: T): string	
showTerminalSize	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#showTerminalSize	cx: showTerminalSize()	
cxAlert	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cxAlert,int	cx: cxAlert(xpos: int = 1)	
also available printLnAlertMsg see cxprint.nim	cx.html#also-available-printlnalertmsg-see-cxprintdotnim	  also available printLnAlertMsg see cxprint.nim	
cxAlertLn	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cxAlertLn,int	cx: cxAlertLn(xpos: int = 1)	
cxHelp	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cxHelp,openArray[string],int	cx: cxHelp(s: openArray[string]; xpos: int = 2)	
infoProc	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#infoProc.t,untyped	cx: infoProc(code: untyped)	
checkLocals	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#checkLocals.t	cx: checkLocals()	
qqTop	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#qqTop	cx: qqTop()	
tmpFilename	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#tmpFilename	cx: tmpFilename(): string	
tmpFilename	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#tmpFilename,string	cx: tmpFilename(filename: string): string	
rmTmpFilenames	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#rmTmpFilenames	cx: rmTmpFilenames()	
cxBell	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cxBell	cx: cxBell()	
cxSound	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#cxSound,string	cx: cxSound(soundfile: string = &quot;/usr/share/sounds/purple/receive.wav&quot;)	
doInfo	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#doInfo	cx: doInfo()	
infoLine	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#infoLine,int	cx: infoLine(xpos: int = 0)	
printTest	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#printTest,string	cx: printTest(astring: string = &quot;&quot;)	
uname	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#uname.t	cx: uname(): untyped	
release	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#release.t	cx: release(): untyped	
doByeBye	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#doByeBye,int	cx: doByeBye(xpos: int = 1)	
doFinish	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#doFinish	cx: doFinish()	
handler	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#handler	cx: handler()	
doCxEnd	@@/@@/@@/@@/.nimble/pkgs/nimcx-1.0.7/nimcx/cx.html#doCxEnd	cx: doCxEnd()	
